import {defineType, SanityDocument} from 'sanity'
import {isUniqueAcrossAllDocuments} from '../utils/isUniqueAcrossAllDocuments'
export default defineType({
  name: 'application',
  type: 'document',
  title: 'Application',
  fields: [
    {
      name: 'job',
      type: 'reference',
      title: 'Job',
      to: [{type: 'job'}],
    },
    {
      name: 'slug', // The field name for the slug.
      type: 'slug', // The field type is 'slug', which supports unique, URL-friendly strings.
      title: 'Slug', // The display title of the field in the Sanity Studio.
      options: {
        // The 'source' defines how the slug is generated automatically.
        // In this case, it is generated by concatenating the candidate, job, and recruiter references.
        source: (doc) => `${doc.candidate._ref}-${doc.job._ref}-${doc.recruiter._ref}`,

        // This uses a custom function to ensure the slug is unique across all documents.
        isUnique: isUniqueAcrossAllDocuments,
      },

      // The 'readOnly' property is dynamically set to make the slug read-only after it's created.
      // If the slug already exists (i.e., 'document.slug.current' is populated), it becomes read-only.
      readOnly: ({document}) => !!document.slug?.current,

      // The validation ensures that the slug is required.
      validation: (Rule) => Rule.required(),
    },
    {
      name: 'recruiter',
      type: 'reference',
      title: 'Recruiter',
      to: [{type: 'recruiter'}],
    },
    {
      name: 'candidate',
      type: 'reference',
      title: 'Candidate',
      to: [{type: 'candidate'}],
    },
    {
      name: 'applicationDate',
      type: 'date',
      title: 'Application Date',
    },
    {
      name: 'status',
      type: 'string',
      title: 'Status',
      options: {
        list: [
          {title: 'En attente', value: 'pending'},
          {title: 'En revue', value: 'underReview'},
          {title: 'Acceptée', value: 'accepted'},
          {title: 'Rejetée', value: 'rejected'},
        ],
      },
    },
  ],
})
